{"version":3,"file":"static/js/148.1acff50c.chunk.js","mappings":"sSAEMA,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIDC,EAAiB,mCAAG,sGACRN,EAASO,IAAI,8BADL,uBACvBC,EADuB,EACvBA,KADuB,kBAGxBA,EAAKC,SAHmB,2CAAH,qDAMjBC,EAAe,mCAAG,WAAMC,GAAN,yFACNX,EAASO,IAAT,6BACCI,EADD,gCADM,uBACrBH,EADqB,EACrBA,KADqB,kBAItBA,EAAKC,SAJiB,2CAAH,sDAOfG,EAAe,mCAAG,WAAMC,GAAN,yFACNb,EAASO,IAAT,iBAAuBM,IADjB,uBACrBL,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAKfM,EAAa,mCAAG,WAAMD,GAAN,yFACJb,EAASO,IAAT,iBAAuBM,EAAvB,aADI,uBACnBL,EADmB,EACnBA,KADmB,kBAEpBA,EAAKO,MAFe,2CAAH,sDAIbC,EAAgB,mCAAG,WAAMH,GAAN,yFACPb,EAASO,IAAT,iBAAuBM,EAAvB,oBADO,uBACtBL,EADsB,EACtBA,KADsB,kBAEvBA,EAAKC,SAFkB,2CAAH,qD,+IC/B7B,EAAuB,wBAAvB,EAAqD,uBAArD,EAAmF,wB,SCsEnF,EAhEiB,WACf,OAA0BQ,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,oGAEfN,GAAW,GAFI,UAGMP,EAAAA,EAAAA,IAAcc,OAAOJ,IAH3B,OAGTK,EAHS,OAIfV,EAASU,GAJM,gDAMfN,EAAS,KAAMO,SANA,yBAQfT,GAAW,GARI,4EAAH,qDAYhBM,GACD,GAAE,CAACH,KAGF,gCACGJ,IAAW,SAAC,KAAD,CAAMW,OAAQ,GAC9BC,MAAO,GACPC,MAAM,UACNC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,EACTC,UAAU,eACVC,eAAe,UACfC,YAAa,EACbC,qBAAsB,IACjBlB,IAAS,mCACTJ,EAAMuB,OAAS,IAAMnB,IACpB,eAAIoB,UAAWC,EAAf,SACGzB,EAAM0B,KAAI,gBAAG/B,EAAH,EAAGA,GAAIgC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACT,gBAAIL,UAAWC,EAAf,WACE,gBAAKD,UAAWC,EACdK,IACEF,EACI,kCAAoCA,EACpC,0FAENG,IAAKJ,EACLb,MAAO,IACPD,OAAQ,OAEV,uBAAIc,KACJ,uCAAeE,OAZalC,EADrB,MAmBG,IAAjBK,EAAMuB,SAAiBnB,IACtB,qEAIP,C","sources":["components/API/api.js","webpack://react-homework-template/./src/components/pages/Cast/cast-page.module.css?53d8","components/pages/Cast/CastPage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '87ac6f2cf8642f95ea875aea3595be38',\n    language: 'en-US',\n  },\n});\n\nexport const getMoviesTrending = async () => {\n  const { data } = await instance.get('/trending/movie/day?page=1');\n\n  return data.results;\n};\n\nexport const getSearchMovies = async query => {\n  const { data } = await instance.get(\n    `search/movie?query=${query}&page=1&include_adult=false`\n  );\n  return data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getMoviesCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data.cast;\n};\nexport const getMoviesReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews?page=1`);\n  return data.results;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"cast-page_list__oaimr\",\"img\":\"cast-page_img__k-rTE\",\"item\":\"cast-page_item__I0DA3\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMoviesCast } from 'components/API/api';\nimport { Oval } from 'react-loader-spinner';\n\nimport css from './cast-page.module.css';\n\nconst CastPage = () => {\n  const [casts, setCasts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n        const result = await getMoviesCast(Number(movieId));\n        setCasts(result);\n      } catch (error) {\n        setError(error.massage);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchMovie();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Oval height={80}\n  width={80}\n  color=\"#4fa94d\"\n  wrapperStyle={{}}\n  wrapperClass=\"\"\n  visible={true}\n  ariaLabel='oval-loading'\n  secondaryColor=\"#4fa94d\"\n  strokeWidth={2}\n  strokeWidthSecondary={2}/>}\n      {error && <p>..error</p>}\n      {casts.length > 0 && !error && (\n        <ul className={css.list}>\n          {casts.map(({ id, name, profile_path, character }) => (\n            <li className={css.item} key={id}>\n              <img className={css.img}\n                src={\n                  profile_path\n                    ? 'https://image.tmdb.org/t/p/w500' + profile_path\n                    : 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png'\n                }\n                alt={name}\n                width={120}\n                height={150}\n              />\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n\n      {casts.length === 0 && !error && (\n        <p>We don't have any actors for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default CastPage;\n"],"names":["instance","axios","baseURL","params","api_key","language","getMoviesTrending","get","data","results","getSearchMovies","query","getMovieDetails","id","getMoviesCast","cast","getMoviesReviews","useState","casts","setCasts","loading","setLoading","error","setError","movieId","useParams","useEffect","fetchMovie","Number","result","massage","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary","length","className","css","map","name","profile_path","character","src","alt"],"sourceRoot":""}